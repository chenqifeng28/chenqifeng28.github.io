<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[用Harbor实现容器镜像仓库的管理和运维<三>]]></title>
      <url>/2017/12/10/harbor_install-3/</url>
      <content type="html"><![CDATA[<h1 id="harbor-安装（HTTPS模式）"><a href="#harbor-安装（HTTPS模式）" class="headerlink" title="harbor 安装（HTTPS模式）"></a>harbor 安装（HTTPS模式）</h1><p>问题1：<br>Error response from daemon: Get <a href="https://harbor1.test.com/v1/users/" target="_blank" rel="external">https://harbor1.test.com/v1/users/</a>: x509: certificate signed by unknown authority<br>用命令行登陆harbor时报错，具体如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@harbor1 harbor]# docker login harbor1.test.com</div><div class="line">Username (admin): admin</div><div class="line">Password: </div><div class="line">Error response from daemon: Get https://harbor1.test.com/v1/users/: x509: certificate signed by unknown authority</div></pre></td></tr></table></figure>
<p>解决方法：<br>由于自创的证书还没有加入系统级别信任，因此需要将证书加入系统级别信任<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@harbor1 harbor]# cp /data/cert/server.crt /etc/pki/ca-trust/source/anchors/reg.test.com.crt</div><div class="line">[root@harbor1 harbor]# update-ca-trust</div></pre></td></tr></table></figure></p>
<p>在加入了根证书后用浏览器访问出现证书错误，于是用脚本再次生成新的证书并导入依旧证书错误，终于在harbor.cfg中找到了原因（没有仔细查看配置说明，走了好多弯路），配置文件中标注了如果使用自签名将核实远程证书设为off<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@harbor1 harbor]# vi harbor.cfg</div><div class="line">...</div><div class="line">#Determine whether the job service should verify the ssl cert when it connects to a remote registry.</div><div class="line">#Set this flag to off when the remote registry uses a self-signed or untrusted certificate.</div><div class="line">verify_remote_cert = on  &lt;!--将这里的on改为off--&gt;</div></pre></td></tr></table></figure></p>
<p>在加入了根证书后用浏览器访问出现证书错误，于是用脚本再次生成新的证书并导入依旧证书错误，终于在harbor.cfg中找到了原因（没有仔细查看配置说明，走了好多弯路），配置文件中标注了如果使用自签名将核实远程证书设为off<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@harbor1 harbor]# vi harbor.cfg</div><div class="line">...</div><div class="line">#Determine whether the job service should verify the ssl cert when it connects to a remote registry.</div><div class="line">#Set this flag to off when the remote registry uses a self-signed or untrusted certificate.</div><div class="line">verify_remote_cert = on  &lt;!--将这里的on改为off--&gt;</div></pre></td></tr></table></figure></p>
<h1 id="harbor镜像同步"><a href="#harbor镜像同步" class="headerlink" title="harbor镜像同步"></a>harbor镜像同步</h1><h2 id="为什么需要镜像同步"><a href="#为什么需要镜像同步" class="headerlink" title="为什么需要镜像同步"></a>为什么需要镜像同步</h2><hr>
<p>由于对镜像的访问是一个核心的容器概念，在实际使用过程中，一个镜像库可能是不够用的，下例情况下，我们可能会需要部署多个镜像仓库：</p>
<p>国外的公有镜像下载过慢，需要一个中转仓库进行加速<br>容器规模较大，一个镜像仓库不堪重负<br>对系统稳定性要求高，需要多个仓库保证高可用性<br>镜像仓库有多级规划，下级仓库依赖上级仓库<br>更常用的场景是，在企业级软件环境中，会在软件开发的不同阶段存在不同的镜像仓库，</p>
<p>在开发环境库，开发人员频繁修改镜像，一旦代码完成，生成稳定的镜像即需要同步到测试环境。<br>在测试环境库，测试人员对镜像是只读操作，测试完成后，将镜像同步到预上线环境库。<br>在预上线环境库，运维人员对镜像也是只读操作，一旦运行正常，即将镜像同步到生产环境库。<br>在这个流程中，各环境的镜像库之间都需要镜像的同步和复制。</p>
<hr>
<h2 id="Harbor的镜像同步机制"><a href="#Harbor的镜像同步机制" class="headerlink" title="Harbor的镜像同步机制"></a>Harbor的镜像同步机制</h2><hr>
<p>有了多个镜像仓库，在多个仓库之间进行镜像同步马上就成为了一个普遍的需求。比较传统的镜像同步方式，有两种：</p>
<p>第一种方案，使用Linux提供的RSYNC服务来定义两个仓库之间的镜像数据同步。<br>第二种方案，对于使用IaaS服务进行镜像存储的场景，利用IaaS的配置工具来对镜像的同步进行配置。<br>这两种方案都依赖于仓库所在的存储环境，而需要采用不同的工具策略。Harbor则提供了更加灵活的方案来处理镜像的同步，其核心是三个概念：</p>
<p>用Harbor自己的API来进行镜像下载和传输，作到与底层存储环境解耦。<br>利用任务调度和监控机制进行复制任务的管理，保障复制任务的健壮性。在同步过程中，如果源镜像已删除，Harbor会自动同步删除远端的镜像。在镜像同步复制的过程中，Harbor会监控整个复制过程，遇到网络等错误，会自动重试。<br>提供复制策略机制保证项目级的复制需求。在Harbor中，可以在项目中创建复制策略，来实现对镜像的同步。与Docker Registry的不同之处在于，Harbor的复制是推（PUSH）的策略，由源端发起，而Docker Registry的复制是拉（PULL）的策略，由目标端发起。</p>
<hr>
<p><img src="http://oys2ph34f.bkt.clouddn.com/harbor_replication-1.jpg" alt="harbor_replication-1"></p>
<h2 id="Harbor的多级部署"><a href="#Harbor的多级部署" class="headerlink" title="Harbor的多级部署"></a>Harbor的多级部署</h2><hr>
<p>在实际的企业级生产运维场景，往往需要跨地域，跨层级进行镜像的同步复制，比如集团企业从总部到省公司，由省公司再市公司的场景。<br>这一部署场景可简化如下图：</p>
<hr>
<p><img src="http://oys2ph34f.bkt.clouddn.com/harbor_replication-2.jpg" alt="harbor_replication-2"><br>更复杂的部署场景如下图：<br><img src="http://oys2ph34f.bkt.clouddn.com/harbor_replication-3.jpg" alt="harbor_replication-3"></p>
<h2 id="镜像同步配置"><a href="#镜像同步配置" class="headerlink" title="镜像同步配置"></a>镜像同步配置</h2><p><strong>环境介绍</strong><br>Master：192.168.10.19  —&gt;   harbor1.test.com<br>Slave：192.168.10.21  —&gt;   harbor2.test.com<br>两个harbor节点都采用的HTTP模式<br>首先登陆到harbor的网页，进入到系统管理-&gt;复制管理<br><img src="http://oys2ph34f.bkt.clouddn.com/harbor_sync_1.jpg" alt="harbor_sync_1"><br>点击“+目标”，创建复制的目标，并测试连接。<br><img src="http://oys2ph34f.bkt.clouddn.com/harbor_sync_2.jpg" alt="harbor_sync_2"><br>如下为创建好一个复制目标<br><img src="http://oys2ph34f.bkt.clouddn.com/harbor_sync_3.jpg" alt="harbor_sync_3"><br>目标创建好之后，返回到项目并且进入需要同步的项目中，并进入复制规则页面<br><img src="http://oys2ph34f.bkt.clouddn.com/harbor_sync_4.jpg" alt="harbor_sync_4"><br>点击“+复制规则”，创建镜像同步的规则并且再次测试连接是否成功。<br><img src="http://oys2ph34f.bkt.clouddn.com/harbor_sync_5.jpg" alt="harbor_sync_5"><br>待测试连接成功后，点击确定。创建好的复制规则如下：<br><img src="http://oys2ph34f.bkt.clouddn.com/harbor_sync_6.jpg" alt="harbor_sync_6"><br>可以看到在页面下方的复制任务栏里会将需要同步的镜像作为任务显示出来，，这里可以看到所有任务的状态都变为finished，说明同步已经完成。<br>登陆到Slave节点harbor2.test.com，可以看到在原本只有一个library项目的基础上，自动增加了一个cqf项目，并且里面已经包含了相关的镜像，同步成功。<br><img src="http://oys2ph34f.bkt.clouddn.com/harbor_sync_7.jpg" alt="harbor_sync_7"></p>
<hr>
<p><strong>问题1</strong>：</p>
<hr>
<p>在创建复制目标测试连接时一直报“测试连接失败”。<br>解决方法：<br>由于harbor创建时使用的域名访问的方式，因此经检查发现时harbor运行的container无法解析harbor2.test.com，导致无法将相应的请求送达的原因。<br>因此需要登陆到UI所在container，修改/etc/resolv.conf和/etc/hosts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">[root@harbor2 ui]# docker exec -it 2f30038f9592 /bin/bash    &lt;!--连接上UI所在的container--&gt;</div><div class="line">root [ /harbor ]# vi /etc/resolv.conf                                                                    </div><div class="line">search localdomain test.com</div><div class="line">nameserver 127.0.0.11</div><div class="line">options ndots:0</div><div class="line">nameserver 192.168.10.2     &lt;!--添加192.168.10.2--&gt;</div><div class="line">&quot;/etc/resolv.conf&quot; 4L, 90C written                                                      </div><div class="line">root [ /harbor ]# cat /etc/hosts </div><div class="line">127.0.0.1	localhost</div><div class="line">::1	localhost ip6-localhost ip6-loopback</div><div class="line">fe00::0	ip6-localnet</div><div class="line">ff00::0	ip6-mcastprefix</div><div class="line">ff02::1	ip6-allnodes</div><div class="line">ff02::2	ip6-allrouters</div><div class="line">172.18.0.6	2f30038f9592</div><div class="line">root [ /harbor ]# echo &quot;192.168.10.19 harbor1.test.com&quot; &gt;&gt; /etc/hosts                                    </div><div class="line">root [ /harbor ]# echo &quot;192.168.10.21 harbor2.test.com&quot; &gt;&gt; /etc/hosts                                    </div><div class="line">root [ /harbor ]# curl harbor1.test.com    &lt;!--测试解析效果--&gt;</div><div class="line">&lt;!doctype html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">    &lt;title&gt;Harbor&lt;/title&gt;</div><div class="line">    &lt;base href=&quot;/&quot;&gt;</div><div class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</div><div class="line">    &lt;link rel=&quot;icon&quot; type=&quot;image/x-icon&quot; href=&quot;favicon.ico?v=2&quot;&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body style=&quot;overflow-y: hidden;&quot;&gt;</div><div class="line">    &lt;harbor-app&gt;</div><div class="line">        &lt;div class=&quot;spinner spinner-lg app-loading&quot;&gt;</div><div class="line">            Loading...</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/harbor-app&gt;</div><div class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/clarity-ui.min.css&quot;&gt;</div><div class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/clarity-icons.min.css&quot;&gt;</div><div class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/styles.css&quot;&gt;</div><div class="line">&lt;script src=&quot;/static/mutationobserver.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;/static/custom-elements.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;/static/clarity-icons.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;/static/build.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line">root [ /harbor ]# curl harbor2.test.com                                                                  </div><div class="line">&lt;!doctype html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">    &lt;title&gt;Harbor&lt;/title&gt;</div><div class="line">    &lt;base href=&quot;/&quot;&gt;</div><div class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</div><div class="line">    &lt;link rel=&quot;icon&quot; type=&quot;image/x-icon&quot; href=&quot;favicon.ico?v=2&quot;&gt;</div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;body style=&quot;overflow-y: hidden;&quot;&gt;</div><div class="line">    &lt;harbor-app&gt;</div><div class="line">        &lt;div class=&quot;spinner spinner-lg app-loading&quot;&gt;</div><div class="line">            Loading...</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/harbor-app&gt;</div><div class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/clarity-ui.min.css&quot;&gt;</div><div class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/clarity-icons.min.css&quot;&gt;</div><div class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/styles.css&quot;&gt;</div><div class="line">&lt;script src=&quot;/static/mutationobserver.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;/static/custom-elements.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;/static/clarity-icons.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;/static/build.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>修改后，测试连接可以通过<br><img src="http://oys2ph34f.bkt.clouddn.com/harbor_replication_error.png" alt=""></p>
<hr>
<p><strong>问题2</strong>：</p>
<hr>
<p>在创建好复制规则后，在复制任务中所有任务的状态都变为error，镜像复制失败<br><img src="http://oys2ph34f.bkt.clouddn.com/harbor_sync_error_1.jpg" alt=""><br>解决方法：<br>检查harbor的日志发现有如下报错信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@harbor1 2017-12-11]# pwd</div><div class="line">/var/log/harbor/2017-12-11</div><div class="line">[root@harbor1 2017-12-11]# cat registry.log </div><div class="line">...</div><div class="line">Dec 11 14:35:01 172.18.0.1 registry[10164]: time=&quot;2017-12-11T06:35:01.800397146Z&quot; level=debug msg=&quot;authorizing request&quot; go.version=go1.7.3 http.request.host=&quot;registry:5000&quot; http.request.id=ca0deea4-ccf1-4c0c-b33d-290a099faa40 http.request.method=GET http.request.remoteaddr=&quot;172.18.0.8:47324&quot; http.request.uri=&quot;/v2/&quot; http.request.useragent=&quot;Go-http-client/1.1&quot; instance.id=3f8229fe-cb32-464c-b9a4-9a20ae9aef4a service=registry version=v2.6.2</div><div class="line">Dec 11 14:35:01 172.18.0.1 registry[10164]: time=&quot;2017-12-11T06:35:01.800720441Z&quot; level=warning msg=&quot;error authorizing context: authorization token required&quot; go.version=go1.7.3 http.request.host=&quot;registry:5000&quot; http.request.id=ca0deea4-ccf1-4c0c-b33d-290a099faa40 http.request.method=GET http.request.remoteaddr=&quot;172.18.0.8:47324&quot; http.request.uri=&quot;/v2/&quot; http.request.useragent=&quot;Go-http-client/1.1&quot; instance.id=3f8229fe-cb32-464c-b9a4-9a20ae9aef4a service=registry version=v2.6.2</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>同时点击复制任务的日志查看，有如下报错信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">2017-12-11T05:19:33Z [INFO] initializing: repository: cqf/centos, tags: [], source URL: http://registry:5000, destination URL: http://harbor2.test.com, insecure: false, destination user: admin</div><div class="line">2017-12-11T05:19:33Z [INFO] initialization completed: project: cqf, repository: cqf/centos, tags: [1.0], source URL: http://registry:5000, destination URL: http://harbor2.test.com, insecure: false, destination user: admin</div><div class="line">2017-12-11T05:19:35Z [ERROR] [transfer.go:204]: an error occurred while creating project cqf on http://harbor2.test.com with user admin : failed to create project cqf on http://harbor2.test.com with user admin: 462 &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</div><div class="line">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</div><div class="line">&lt;title&gt;462 Forbidden Region - DOSarrest Internet Security&lt;/title&gt;</div><div class="line">&lt;link href=&quot;/DOAError/assets/css/core.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;</div><div class="line">&lt;link rel=&quot;shortcut icon&quot; href=&quot;/DOAError/assets/images/favicon.ico&quot; /&gt;&lt;link rel=&quot;apple-touch-icon&quot; href=&quot;/DOAError/assets/images/icon-protection.png&quot; /&gt;</div><div class="line">&lt;script&gt;</div><div class="line">function id_process(n)&#123;for(var t=n+&quot;=&quot;,r=document.cookie.split(&quot;;&quot;),e=0;e&lt;r.length;e++)&#123;for(var g=r[e];&quot; &quot;==g.charAt(0);)g=g.substring(1,g.length);if(0==g.indexOf(t))return g.substring(t.length,g.length)&#125;return null&#125;;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div></pre></td></tr></table></figure></p>
<p>报错信息与前面的测试连接失败比较类似，因此将Master节点上的所有harbor容器全都修改下/etc/resolv.conf和/etc/hosts两个文件，后验证成功，同步正常。<br><strong>PS</strong><br>为什么会出现这个无法解析的问题，待后续再解决。</p>
]]></content>
      
        <categories>
            
            <category> Technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Technology </tag>
            
            <tag> Harbor </tag>
            
            <tag> Registry </tag>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用Harbor实现容器镜像仓库的管理和运维<二>]]></title>
      <url>/2017/12/08/harbor_install-2/</url>
      <content type="html"><![CDATA[<hr>
<p><strong>修改Harbor的默认端口</strong></p>
<hr>
<p>一般情况下，harbor默认使用的端口为80端口，不管用命令行登陆还是网页登陆（HTTP模式）都是连到80端口，为了保证harbor的端口和openshift的镜像仓库端口保持一致，因此需要将80端口修改为5000端口。<br>对于openshift all-in-one架构，router和harbor部署在一起，而router的监听端口为80和443端口，因此为了避免端口冲突，需要将harbor的端口改为其它端口。</p>
<h1 id="修改docker-compose-yml"><a href="#修改docker-compose-yml" class="headerlink" title="修改docker-compose.yml"></a>修改docker-compose.yml</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">[root@harbor1 harbor]# vi docker-compose.yml </div><div class="line"></div><div class="line">version: &apos;2&apos;</div><div class="line">services:</div><div class="line">  log:</div><div class="line">    image: vmware/harbor-log:v1.2.2</div><div class="line">    container_name: harbor-log</div><div class="line">    restart: always</div><div class="line">    volumes:</div><div class="line">      - /var/log/harbor/:/var/log/docker/:z</div><div class="line">...</div><div class="line">proxy:</div><div class="line">    image: vmware/nginx-photon:1.11.13</div><div class="line">    container_name: nginx</div><div class="line">    restart: always</div><div class="line">    volumes:</div><div class="line">      - ./common/config/nginx:/etc/nginx:z</div><div class="line">    networks:</div><div class="line">      - harbor</div><div class="line">    ports:</div><div class="line">      - 10080:80   &lt;!--修改80端口为10080端口--&gt;</div><div class="line">      - 443:443</div><div class="line">      - 4443:4443</div><div class="line">      - 5000:5000</div></pre></td></tr></table></figure>
<h1 id="修改-data-harbor-common-templates-registry-config-yml"><a href="#修改-data-harbor-common-templates-registry-config-yml" class="headerlink" title="修改/data/harbor/common/templates/registry/config.yml"></a>修改/data/harbor/common/templates/registry/config.yml</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">[root@harbor1 harbor]# vi common/templates/registry/config.yml </div><div class="line"></div><div class="line">version: 0.1</div><div class="line">log:</div><div class="line">  level: debug</div><div class="line">  fields:</div><div class="line">    service: registry</div><div class="line">storage:</div><div class="line">    cache:</div><div class="line">        layerinfo: inmemory</div><div class="line">    filesystem:</div><div class="line">        rootdirectory: /storage</div><div class="line">    maintenance:</div><div class="line">        uploadpurging:</div><div class="line">            enabled: false</div><div class="line">    delete:</div><div class="line">        enabled: true</div><div class="line">http:</div><div class="line">    addr: :5000</div><div class="line">    secret: placeholder</div><div class="line">    debug:</div><div class="line">        addr: localhost:5001</div><div class="line">auth:</div><div class="line">  token:</div><div class="line">    issuer: harbor-token-issuer</div><div class="line">    realm: $ui_url:10080/service/token     &lt;!--在ui_url后面接上端口--&gt;</div><div class="line">    rootcertbundle: /etc/registry/root.crt</div><div class="line">    service: harbor-registry</div></pre></td></tr></table></figure>
<h1 id="停止harbor服务"><a href="#停止harbor服务" class="headerlink" title="停止harbor服务"></a>停止harbor服务</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@harbor1 harbor]# docker-compose stop</div><div class="line">Stopping registry   ... done</div><div class="line">Stopping harbor-log ... done</div></pre></td></tr></table></figure>
<h1 id="重新生成harbor配置文件"><a href="#重新生成harbor配置文件" class="headerlink" title="重新生成harbor配置文件"></a>重新生成harbor配置文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">[root@harbor1 harbor]# ./install.sh</div><div class="line">[Step 0]: checking installation environment ...</div><div class="line">Note: docker version: 1.12.6</div><div class="line">Note: docker-compose version: 1.17.0</div><div class="line"></div><div class="line">[Step 1]: loading Harbor images ...</div><div class="line">Loaded image: vmware/harbor-ui:v1.2.2</div><div class="line">Loaded image: vmware/notary-photon:server-0.5.0</div><div class="line">Loaded image: vmware/nginx-photon:1.11.13</div><div class="line">Loaded image: vmware/registry:2.6.2-photon</div><div class="line">Loaded image: photon:1.0</div><div class="line">Loaded image: vmware/notary-photon:signer-0.5.0</div><div class="line">Loaded image: vmware/harbor-adminserver:v1.2.2</div><div class="line">Loaded image: vmware/harbor-log:v1.2.2</div><div class="line">Loaded image: vmware/harbor-db:v1.2.2</div><div class="line">Loaded image: vmware/harbor-jobservice:v1.2.2</div><div class="line">Loaded image: vmware/harbor-notary-db:mariadb-10.1.10</div><div class="line">Loaded image: vmware/clair:v2.0.1-photon</div><div class="line">Loaded image: vmware/postgresql:9.6.4-photon</div><div class="line"></div><div class="line">[Step 2]: preparing environment ...</div><div class="line">Clearing the configuration file: ./common/config/adminserver/env</div><div class="line">Clearing the configuration file: ./common/config/ui/env</div><div class="line">Clearing the configuration file: ./common/config/ui/app.conf</div><div class="line">Clearing the configuration file: ./common/config/ui/private_key.pem</div><div class="line">Clearing the configuration file: ./common/config/db/env</div><div class="line">Clearing the configuration file: ./common/config/jobservice/env</div><div class="line">Clearing the configuration file: ./common/config/jobservice/app.conf</div><div class="line">Clearing the configuration file: ./common/config/registry/config.yml</div><div class="line">Clearing the configuration file: ./common/config/registry/root.crt</div><div class="line">Clearing the configuration file: ./common/config/nginx/nginx.conf</div><div class="line">loaded secret from file: /data/secretkey</div><div class="line">Generated configuration file: ./common/config/nginx/nginx.conf</div><div class="line">Generated configuration file: ./common/config/adminserver/env</div><div class="line">Generated configuration file: ./common/config/ui/env</div><div class="line">Generated configuration file: ./common/config/registry/config.yml</div><div class="line">Generated configuration file: ./common/config/db/env</div><div class="line">Generated configuration file: ./common/config/jobservice/env</div><div class="line">Generated configuration file: ./common/config/jobservice/app.conf</div><div class="line">Generated configuration file: ./common/config/ui/app.conf</div><div class="line">Generated certificate, key file: ./common/config/ui/private_key.pem, cert file: ./common/config/registry/root.crt</div><div class="line">The configuration files are ready, please use docker-compose to start the service.</div><div class="line"></div><div class="line">[Step 3]: checking existing instance of Harbor ...</div><div class="line">Note: stopping existing Harbor instance ...</div><div class="line">Removing nginx              ... done</div><div class="line">Removing harbor-jobservice  ... done</div><div class="line">Removing harbor-ui          ... done</div><div class="line">Removing harbor-adminserver ... done</div><div class="line">Removing harbor-db          ... done</div><div class="line">Removing registry           ... done</div><div class="line">Removing harbor-log         ... done</div><div class="line">Removing network harbor_harbor</div><div class="line"></div><div class="line">[Step 4]: starting Harbor ...</div><div class="line">Creating network &quot;harbor_harbor&quot; with the default driver</div><div class="line">Creating harbor-log ... </div><div class="line">Creating harbor-log ... done</div><div class="line">Creating registry ... </div><div class="line">Creating harbor-db ... </div><div class="line">Creating registry</div><div class="line">Creating harbor-adminserver ... </div><div class="line">Creating harbor-db</div><div class="line">Creating harbor-adminserver ... done</div><div class="line">Creating harbor-ui ... </div><div class="line">Creating harbor-ui ... done</div><div class="line">Creating harbor-jobservice ... </div><div class="line">Creating nginx ... </div><div class="line">Creating harbor-jobservice</div><div class="line">Creating nginx ... done</div><div class="line"></div><div class="line">✔ ----Harbor has been installed and started successfully.----</div><div class="line"></div><div class="line">Now you should be able to visit the admin portal at http://harbor1.test.com. </div><div class="line">For more details, please visit https://github.com/vmware/harbor .</div></pre></td></tr></table></figure>
<h1 id="修改-usr-lib-systemd-system-docker-service"><a href="#修改-usr-lib-systemd-system-docker-service" class="headerlink" title="修改/usr/lib/systemd/system/docker.service"></a>修改/usr/lib/systemd/system/docker.service</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@harbor1 harbor]# vi /usr/lib/systemd/system/docker.service</div><div class="line">...</div><div class="line">ExecStart=/usr/bin/dockerd-current \</div><div class="line">          --insecure-registry harbor1.test.com:10080 \</div></pre></td></tr></table></figure>
<h1 id="重启docker服务"><a href="#重启docker服务" class="headerlink" title="重启docker服务"></a>重启docker服务</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@harbor1 harbor]# systemctl daemon-reload </div><div class="line">[root@harbor1 harbor]# systemctl restart docker</div></pre></td></tr></table></figure>
<h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@harbor1 harbor]# docker login harbor1.test.com:10080</div><div class="line">Username: admin</div><div class="line">Password: </div><div class="line">Login Succeeded</div></pre></td></tr></table></figure>
<p>验证成功！</p>
<p><strong>问题</strong><br>重启docker服务后，发现登陆时报<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@harbor1 harbor]# docker login harbor1.test.com:10080</div><div class="line">Username: admin</div><div class="line">Password: </div><div class="line">Error response from daemon: Get http://harbor1.test.com:10080/v1/users/: dial tcp 192.168.10.19:10080: getsockopt: connection refused</div></pre></td></tr></table></figure></p>
<p>检查docker-compose的服务时发现部分服务没有启动，然后用docker-compose重启下服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">[root@harbor1 harbor]# docker-compose ps</div><div class="line">       Name                     Command                State                       Ports                  </div><div class="line">----------------------------------------------------------------------------------------------------------</div><div class="line">harbor-adminserver   /harbor/harbor_adminserver       Up                                                  </div><div class="line">harbor-db            docker-entrypoint.sh mysqld      Exit 128                                            </div><div class="line">harbor-jobservice    /harbor/harbor_jobservice        Up                                                  </div><div class="line">harbor-log           /bin/sh -c crond &amp;&amp; rm -f  ...   Up         127.0.0.1:1514-&gt;514/tcp                  </div><div class="line">harbor-ui            /harbor/harbor_ui                Up                                                  </div><div class="line">nginx                nginx -g daemon off;             Up         0.0.0.0:443-&gt;443/tcp,                    </div><div class="line">                                                                 0.0.0.0:4443-&gt;4443/tcp,                  </div><div class="line">                                                                 0.0.0.0:5000-&gt;5000/tcp,                  </div><div class="line">                                                                 0.0.0.0:10080-&gt;80/tcp                    </div><div class="line">registry             /entrypoint.sh serve /etc/ ...   Exit 2 </div><div class="line">[root@harbor1 harbor]# docker-compose stop</div><div class="line">Stopping nginx              ... done</div><div class="line">Stopping harbor-jobservice  ... done</div><div class="line">Stopping harbor-ui          ... done</div><div class="line">Stopping harbor-adminserver ... done</div><div class="line">Stopping harbor-log         ... done</div><div class="line">[root@harbor1 harbor]# docker-compose start</div><div class="line">Starting log         ... done</div><div class="line">Starting adminserver ... done</div><div class="line">Starting registry    ... done</div><div class="line">Starting ui          ... done</div><div class="line">Starting mysql       ... done</div><div class="line">Starting jobservice  ... done</div><div class="line">Starting proxy       ... done</div><div class="line">[root@harbor1 harbor]# docker-compose ps</div><div class="line">       Name                     Command               State                      Ports                    </div><div class="line">----------------------------------------------------------------------------------------------------------</div><div class="line">harbor-adminserver   /harbor/harbor_adminserver       Up                                                  </div><div class="line">harbor-db            docker-entrypoint.sh mysqld      Up      3306/tcp                                    </div><div class="line">harbor-jobservice    /harbor/harbor_jobservice        Up                                                  </div><div class="line">harbor-log           /bin/sh -c crond &amp;&amp; rm -f  ...   Up      127.0.0.1:1514-&gt;514/tcp                     </div><div class="line">harbor-ui            /harbor/harbor_ui                Up                                                  </div><div class="line">nginx                nginx -g daemon off;             Up      0.0.0.0:443-&gt;443/tcp,                       </div><div class="line">                                                              0.0.0.0:4443-&gt;4443/tcp,                     </div><div class="line">                                                              0.0.0.0:5000-&gt;5000/tcp,                     </div><div class="line">                                                              0.0.0.0:10080-&gt;80/tcp                       </div><div class="line">registry             /entrypoint.sh serve /etc/ ...   Up      5000/tcp</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Technology </tag>
            
            <tag> Harbor </tag>
            
            <tag> Registry </tag>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用Harbor实现容器镜像仓库的管理和运维<一>]]></title>
      <url>/2017/12/04/harbor_install-1/</url>
      <content type="html"><![CDATA[<h1 id="Harbor介绍"><a href="#Harbor介绍" class="headerlink" title="Harbor介绍"></a>Harbor介绍</h1><p>Harbor是由VMware中国研发团队负责开发的开源企业级Registry，可帮助用户迅速搭建企业级的Registry服务。该项目发布5多个月以来，深受用户喜爱，在GitHub获得了近1000个点赞星星和200多个Forks。 Harbor的GitHub地址： <a href="https://github.com/vmware/harbor" target="_blank" rel="external">https://github.com/vmware/harbor</a><br>其目标是帮助用户迅速搭建一个企业级的Dockerregistry服务。它以Docker公司开源的registry为基础，提供了管理UI，基于角色的访问控制(Role Based Access Control)，AD/LDAP集成、以及审计日志(Auditlogging) 等企业用户需求的功能，同时还原生支持中文。Harbor的每个组件都是以Docker容器的形式构建的，使用Docker Compose来对它进行部署。用于部署Harbor的Docker Compose模板位于 /$harbor/docker-compose.yml，由5个容器组成：<br><strong>Proxy</strong>：由Nginx 服务器构成的反向代理。<br><strong>Registry</strong>：由Docker官方的开源registry镜像构成的容器实例。<br><strong>UI</strong>：即架构中的core services， 构成此容器的代码是Harbor项目的主体。<br><strong>MySQL</strong>：由官方MySQL镜像构成的数据库容器。<br><strong>Log</strong>：运行着rsyslogd的容器，通过log-driver的形式收集其他容器的日志。<br>这几个容器通过Docker link的形式连接在一起，在容器之间通过容器名字互相访问。对终端用户而言，只需要暴露proxy （即Nginx）的服务端口。</p>
<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>harbor离线下载包地址:<a href="http://harbor.orientsoft.cn/harbor-1.2.2/harbor-offline-installer-v1.2.2.tgz" target="_blank" rel="external">harbor离线安装包harbor-offline-installer-v1.2.2.tgz</a><br>Harbor使用几个Docker容器来部署的，因此部署Harbor的节点上要求安装好Docker服务，同时要求安装好Python，DockerCompose，相关组件的版本如下：<br>python &gt;= 2.7<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@registry01 harbor]# python --version</div><div class="line">Python 2.7.5</div></pre></td></tr></table></figure></p>
<p>Docker engine &gt;= 1.10<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@registry01 harbor]# docker --version</div><div class="line">Docker version 1.12.6, build 0fdc778/1.12.6</div></pre></td></tr></table></figure></p>
<p>Docker Compose &gt;= 1.6.0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@registry01 harbor]# docker-compose --version</div><div class="line">docker-compose version 1.17.0, build ac53b73</div></pre></td></tr></table></figure></p>
<p>说明：在openshift中，默认的registry上没有安装docker-compose，因此需要手动安装docker-compose。</p>
<h2 id="docker-compose安装方法"><a href="#docker-compose安装方法" class="headerlink" title="docker-compose安装方法"></a>docker-compose安装方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@registry01 bin]# curl -L https://github.com/docker/compose/releases/download/1.17.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</div><div class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class="line">                                 Dload  Upload   Total   Spent    Left  Speed</div><div class="line">100   617    0   617    0     0    429      0 --:--:--  0:00:01 --:--:--   429</div><div class="line">  0     0    0     0    0     0      0      0 --:--:--  0:00:21 --:--:--     0</div><div class="line">[root@registry01 bin]#chmod +x usr/local/bin/docker-compose</div><div class="line">[root@registry01 bin]# docker-compose --version</div><div class="line">docker-compose version 1.17.0, build ac53b73</div></pre></td></tr></table></figure>
<h1 id="Harbor安装（HTTP模式）"><a href="#Harbor安装（HTTP模式）" class="headerlink" title="Harbor安装（HTTP模式）"></a>Harbor安装（HTTP模式）</h1><p>harbor的安装包下载好之后，上传到registry服务器中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div></pre></td><td class="code"><pre><div class="line">[root@registry01 ~]# mkdir /data/</div><div class="line">[root@registry01 ~]# tar -xzvf harbor.v1.2.2.tar.gz -C /data</div><div class="line">[root@registry01 harbor]# vi harbor.cfg  修改hostname</div><div class="line">[root@registry01 harbor]# ./prepare </div><div class="line">Generated and saved secret to file: /data/secretkey</div><div class="line">Generated configuration file: ./common/config/nginx/nginx.conf</div><div class="line">Generated configuration file: ./common/config/adminserver/env</div><div class="line">Generated configuration file: ./common/config/ui/env</div><div class="line">Generated configuration file: ./common/config/registry/config.yml</div><div class="line">Generated configuration file: ./common/config/db/env</div><div class="line">Generated configuration file: ./common/config/jobservice/env</div><div class="line">Generated configuration file: ./common/config/jobservice/app.conf</div><div class="line">Generated configuration file: ./common/config/ui/app.conf</div><div class="line">Generated certificate, key file: ./common/config/ui/private_key.pem, cert file: ./common/config/registry/root.crt</div><div class="line">The configuration files are ready, please use docker-compose to start the service.</div><div class="line">[root@registry01 harbor]# ./install.sh</div><div class="line">[Step 0]: checking installation environment ...</div><div class="line">Note: docker version: 1.12.6</div><div class="line">Note: docker-compose version: 1.17.0</div><div class="line">[Step 1]: loading Harbor images ...</div><div class="line">dd60b611baaa: Loading layer [==================================================&gt;] 133.2 MB/133.2 MB</div><div class="line">abf0579c40fd: Loading layer [==================================================&gt;] 1.536 kB/1.536 kB</div><div class="line">ea1fc7bed9c5: Loading layer [==================================================&gt;] 22.48 MB/22.48 MB</div><div class="line">1d6671367c69: Loading layer [==================================================&gt;] 7.168 kB/7.168 kB</div><div class="line">b322bb3e4765: Loading layer [==================================================&gt;] 5.339 MB/5.339 MB</div><div class="line">0cf512d418ac: Loading layer [==================================================&gt;] 9.728 kB/9.728 kB</div><div class="line">4a7cdc0b1a2b: Loading layer [==================================================&gt;]  2.56 kB/2.56 kB</div><div class="line">ef1130526636: Loading layer [==================================================&gt;] 22.48 MB/22.48 MB</div><div class="line">Loaded image: vmware/harbor-ui:v1.2.2                                           ] 229.4 kB/22.48 MB</div><div class="line">4a050fccec52: Loading layer [==================================================&gt;] 12.16 MB/12.16 MB</div><div class="line">d918d73369ec: Loading layer [==================================================&gt;]  17.3 MB/17.3 MB</div><div class="line">22898836924e: Loading layer [==================================================&gt;] 15.87 kB/15.87 kB</div><div class="line">Loaded image: vmware/notary-photon:server-0.5.0                                 ]    512 B/15.87 kB</div><div class="line">76c156eab077: Loading layer [==================================================&gt;]   134 MB/134 MB</div><div class="line">1eae6563289a: Loading layer [==================================================&gt;] 16.42 MB/16.42 MB</div><div class="line">Loaded image: vmware/nginx-photon:1.11.13                                       ] 171.1 kB/16.42 MB</div><div class="line">2e814f7ef645: Loading layer [==================================================&gt;] 2.048 kB/2.048 kB</div><div class="line">bc5742b580db: Loading layer [==================================================&gt;] 2.048 kB/2.048 kB</div><div class="line">5413bcdb81b0: Loading layer [==================================================&gt;]  2.56 kB/2.56 kB</div><div class="line">c4e2be066795: Loading layer [==================================================&gt;] 3.584 kB/3.584 kB</div><div class="line">a4ea62be60b0: Loading layer [==================================================&gt;]  22.8 MB/22.8 MB</div><div class="line">800a351ae5da: Loading layer [==================================================&gt;]  22.8 MB/22.8 MB</div><div class="line">Loaded image: vmware/registry:2.6.2-photon                                      ] 229.4 kB/22.8 MB</div><div class="line">Loaded image: photon:1.0</div><div class="line">a39bd6a7f897: Loading layer [==================================================&gt;] 10.95 MB/10.95 MB</div><div class="line">6f79b8337a1f: Loading layer [==================================================&gt;]  17.3 MB/17.3 MB</div><div class="line">74bbd0e81dd0: Loading layer [==================================================&gt;] 15.87 kB/15.87 kB</div><div class="line">Loaded image: vmware/notary-photon:signer-0.5.0                                 ]    512 B/15.87 kB</div><div class="line">2202528221a2: Loading layer [==================================================&gt;]  7.07 MB/7.07 MB</div><div class="line">4fe250d3c912: Loading layer [==================================================&gt;]  7.07 MB/7.07 MB</div><div class="line">Loaded image: vmware/harbor-adminserver:v1.2.2                                  ]  98.3 kB/7.07 MB</div><div class="line">9463fb852970: Loading layer [==================================================&gt;] 75.37 MB/75.37 MB</div><div class="line">d2c9a2a395d9: Loading layer [==================================================&gt;] 3.584 kB/3.584 kB</div><div class="line">b08aea2a8a82: Loading layer [==================================================&gt;] 3.072 kB/3.072 kB</div><div class="line">103e65a1013b: Loading layer [==================================================&gt;] 3.072 kB/3.072 kB</div><div class="line">Loaded image: vmware/harbor-log:v1.2.2                                          ]    512 B/3.072 kB</div><div class="line">5d6cbe0dbcf9: Loading layer [==================================================&gt;] 129.2 MB/129.2 MB</div><div class="line">435f2dfbd884: Loading layer [==================================================&gt;] 344.6 kB/344.6 kB</div><div class="line">814d7b59f0cc: Loading layer [==================================================&gt;] 4.657 MB/4.657 MB</div><div class="line">aae399245bd0: Loading layer [==================================================&gt;] 1.536 kB/1.536 kB</div><div class="line">21e2ae955f72: Loading layer [==================================================&gt;] 33.84 MB/33.84 MB</div><div class="line">a2d0f7b84059: Loading layer [==================================================&gt;] 25.09 kB/25.09 kB</div><div class="line">819fa6af55b8: Loading layer [==================================================&gt;] 3.584 kB/3.584 kB</div><div class="line">78914c99a468: Loading layer [==================================================&gt;] 167.7 MB/167.7 MB</div><div class="line">36e79c658afb: Loading layer [==================================================&gt;] 6.144 kB/6.144 kB</div><div class="line">f73503aca003: Loading layer [==================================================&gt;] 9.216 kB/9.216 kB</div><div class="line">a21b39f6da59: Loading layer [==================================================&gt;] 1.536 kB/1.536 kB</div><div class="line">ef81eb7c77b3: Loading layer [==================================================&gt;] 8.704 kB/8.704 kB</div><div class="line">08d0cfe60b0d: Loading layer [==================================================&gt;] 4.608 kB/4.608 kB</div><div class="line">0864dda8f611: Loading layer [==================================================&gt;] 4.608 kB/4.608 kB</div><div class="line">Loaded image: vmware/harbor-db:v1.2.2                                           ]    512 B/4.608 kB</div><div class="line">29d1f4ae97dd: Loading layer [==================================================&gt;] 18.31 MB/18.31 MB</div><div class="line">7caf936e1402: Loading layer [==================================================&gt;] 18.31 MB/18.31 MB</div><div class="line">Loaded image: vmware/harbor-jobservice:v1.2.2                                   ] 196.6 kB/18.31 MB</div><div class="line">78dbfa5b7cbc: Loading layer [==================================================&gt;] 130.9 MB/130.9 MB</div><div class="line">5f70bf18a086: Loading layer [==================================================&gt;] 1.024 kB/1.024 kB</div><div class="line">8deec01122be: Loading layer [==================================================&gt;] 344.6 kB/344.6 kB</div><div class="line">574ab36807f2: Loading layer [==================================================&gt;] 1.536 kB/1.536 kB</div><div class="line">d8f2cde2eef8: Loading layer [==================================================&gt;] 20.48 kB/20.48 kB</div><div class="line">eaa3924b054e: Loading layer [==================================================&gt;]  5.12 kB/5.12 kB</div><div class="line">8aa2c772121c: Loading layer [==================================================&gt;] 184.3 MB/184.3 MB</div><div class="line">c3014bbccb0b: Loading layer [==================================================&gt;] 8.704 kB/8.704 kB</div><div class="line">978a35efaa8c: Loading layer [==================================================&gt;] 4.608 kB/4.608 kB</div><div class="line">c2385ae7d6e5: Loading layer [==================================================&gt;]  16.6 MB/16.6 MB</div><div class="line">Loaded image: vmware/harbor-notary-db:mariadb-10.1.10                           ] 196.6 kB/16.6 MB</div><div class="line">c192a34d4ff4: Loading layer [==================================================&gt;] 155.2 MB/155.2 MB</div><div class="line">d012a9276a83: Loading layer [==================================================&gt;] 10.75 MB/10.75 MB</div><div class="line">b8befd881cb5: Loading layer [==================================================&gt;] 10.75 MB/10.75 MB</div><div class="line">Loaded image: vmware/clair:v2.0.1-photon                                        ] 131.1 kB/10.75 MB</div><div class="line">bbda1562018e: Loading layer [==================================================&gt;] 101.6 MB/101.6 MB</div><div class="line">1171ab08cc04: Loading layer [==================================================&gt;] 6.656 kB/6.656 kB</div><div class="line">6df81d3a0683: Loading layer [==================================================&gt;] 6.656 kB/6.656 kB</div><div class="line">Loaded image: vmware/postgresql:9.6.4-photon                                    ]    512 B/6.656 kB</div><div class="line">[Step 2]: preparing environment ...</div><div class="line">Clearing the configuration file: ./common/config/adminserver/env</div><div class="line">Clearing the configuration file: ./common/config/ui/env</div><div class="line">Clearing the configuration file: ./common/config/ui/app.conf</div><div class="line">Clearing the configuration file: ./common/config/ui/private_key.pem</div><div class="line">Clearing the configuration file: ./common/config/db/env</div><div class="line">Clearing the configuration file: ./common/config/jobservice/env</div><div class="line">Clearing the configuration file: ./common/config/jobservice/app.conf</div><div class="line">Clearing the configuration file: ./common/config/registry/config.yml</div><div class="line">Clearing the configuration file: ./common/config/registry/root.crt</div><div class="line">Clearing the configuration file: ./common/config/nginx/nginx.conf</div><div class="line">loaded secret from file: /data/secretkey</div><div class="line">Generated configuration file: ./common/config/nginx/nginx.conf</div><div class="line">Generated configuration file: ./common/config/adminserver/env</div><div class="line">Generated configuration file: ./common/config/ui/env</div><div class="line">Generated configuration file: ./common/config/registry/config.yml</div><div class="line">Generated configuration file: ./common/config/db/env</div><div class="line">Generated configuration file: ./common/config/jobservice/env</div><div class="line">Generated configuration file: ./common/config/jobservice/app.conf</div><div class="line">Generated configuration file: ./common/config/ui/app.conf</div><div class="line">Generated certificate, key file: ./common/config/ui/private_key.pem, cert file: ./common/config/registry/root.crt</div><div class="line">The configuration files are ready, please use docker-compose to start the service.</div><div class="line">[Step 3]: checking existing instance of Harbor ...</div><div class="line">[Step 4]: starting Harbor ...</div><div class="line">Creating network &quot;harbor_harbor&quot; with the default driver</div><div class="line">Creating harbor-log ... </div><div class="line">Creating harbor-log ... done</div><div class="line">Creating harbor-db ... </div><div class="line">Creating registry ... </div><div class="line">Creating harbor-adminserver ... </div><div class="line">Creating registry</div><div class="line">Creating harbor-adminserver</div><div class="line">Creating registry ... done</div><div class="line">Creating harbor-db ... done</div><div class="line">Creating harbor-ui ... done</div><div class="line">Creating nginx ... </div><div class="line">Creating harbor-jobservice ... </div><div class="line">Creating nginx</div><div class="line">Creating nginx ... done</div><div class="line">✔ ----Harbor has been installed and started successfully.----</div><div class="line">Now you should be able to visit the admin portal at http://registry01.demo.com. </div><div class="line">For more details, please visit https://github.com/vmware/harbor .</div><div class="line">[root@registry01 harbor]# systemctl daemon-reload</div><div class="line">[root@registry01 harbor]# systemctl restart docker.service</div><div class="line">[root@registry01 harbor]# systemctl status docker</div><div class="line">● docker.service - Docker Application Container Engine</div><div class="line">   Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; vendor preset: disabled)</div><div class="line">   Active: active (running) since Mon 2017-12-04 10:44:55 CST; 30min ago</div><div class="line">     Docs: http://docs.docker.com</div><div class="line"> Main PID: 13161 (dockerd-current)</div><div class="line">   Memory: 50.9M</div><div class="line">   CGroup: /system.slice/docker.service</div><div class="line">           ├─13161 /usr/bin/dockerd-current --insecure-registry 192.168.10.16:5000 --add-runtime docker-runc=/usr/libexec/docker/docker-runc-current --default-runtime=d...</div><div class="line">           ├─13167 /usr/bin/docker-containerd-current -l unix:///var/run/docker/libcontainerd/docker-containerd.sock --shim docker-containerd-shim --metrics-interval=0 ...</div><div class="line">           ├─13333 /usr/libexec/docker/docker-proxy-current -proto tcp -host-ip 127.0.0.1 -host-port 1514 -container-ip 172.18.0.2 -container-port 514</div><div class="line">           ├─13341 /usr/bin/docker-containerd-shim-current 985eeeaa997ba93fe546b13910d31e0f1f4a78891e09855443b48be9c00ce063 /var/run/docker/libcontainerd/985eeeaa997ba9...</div><div class="line">           ├─13412 /usr/bin/docker-containerd-shim-current 42fa92850b638e76618cb99810ddbf03f54ab1535c5d2e5514214467a1287718 /var/run/docker/libcontainerd/42fa92850b638e...</div><div class="line">           ├─13495 /usr/bin/docker-containerd-shim-current 9cde9a9c34678f1f05c00081c96acc3f70a0dbc82862a365f8292b9b55e49a57 /var/run/docker/libcontainerd/9cde9a9c34678f...</div><div class="line">           ├─13575 /usr/bin/docker-containerd-shim-current fe86c99f103293578fa0a91b2589761fbee017af51bf6c6fe1465000ea3d8c39 /var/run/docker/libcontainerd/fe86c99f103293...</div><div class="line">           ├─13664 /usr/libexec/docker/docker-proxy-current -proto tcp -host-ip 0.0.0.0 -host-port 4443 -container-ip 172.18.0.6 -container-port 4443</div><div class="line">           ├─13672 /usr/libexec/docker/docker-proxy-current -proto tcp -host-ip 0.0.0.0 -host-port 443 -container-ip 172.18.0.6 -container-port 443</div><div class="line">           ├─13680 /usr/libexec/docker/docker-proxy-current -proto tcp -host-ip 0.0.0.0 -host-port 80 -container-ip 172.18.0.6 -container-port 80</div><div class="line">           ├─13769 /usr/bin/docker-containerd-shim-current 7051a590f014bb795b98c772e4fe6c1285f098f8ec389f53e8f54a09bce8ad30 /var/run/docker/libcontainerd/7051a590f014bb...</div><div class="line">           ├─16083 /usr/bin/docker-containerd-shim-current 9c91a1b08ca13f7182363c99a70ffa7dc8545e4913cac41090a241ea4dcf5e52 /var/run/docker/libcontainerd/9c91a1b08ca13f...</div><div class="line">           └─16156 /usr/bin/docker-containerd-shim-current ee4f90c39d99bb24aa94654fb519673f01e2ae8cc9bcd81f8b6ae7071ff5d27a /var/run/docker/libcontainerd/ee4f90c39d99bb...</div><div class="line">[root@registry01 harbor]# docker ps</div><div class="line">CONTAINER ID        IMAGE                              COMMAND                  CREATED             STATUS              PORTS                                                              NAMES</div><div class="line">fe86c99f1032        vmware/harbor-jobservice:v1.2.2    &quot;/harbor/harbor_jobse&quot;   About an hour ago   Up 38 minutes                                                                          harbor-jobservice</div><div class="line">9c91a1b08ca1        vmware/nginx-photon:1.11.13        &quot;nginx -g &apos;daemon off&quot;   About an hour ago   Up 38 minutes       0.0.0.0:80-&gt;80/tcp, 0.0.0.0:443-&gt;443/tcp, 0.0.0.0:4443-&gt;4443/tcp   nginx</div><div class="line">ee4f90c39d99        vmware/harbor-ui:v1.2.2            &quot;/harbor/harbor_ui&quot;      About an hour ago   Up 38 minutes                                                                          harbor-ui</div><div class="line">7051a590f014        vmware/harbor-db:v1.2.2            &quot;docker-entrypoint.sh&quot;   About an hour ago   Up 38 minutes       3306/tcp                                                           harbor-db</div><div class="line">42fa92850b63        vmware/registry:2.6.2-photon       &quot;/entrypoint.sh serve&quot;   About an hour ago   Up 38 minutes       5000/tcp                                                           registry</div><div class="line">9cde9a9c3467        vmware/harbor-adminserver:v1.2.2   &quot;/harbor/harbor_admin&quot;   About an hour ago   Up 38 minutes                                                                          harbor-adminserver</div><div class="line">985eeeaa997b        vmware/harbor-log:v1.2.2           &quot;/bin/sh -c &apos;crond &amp;&amp;&quot;   About an hour ago   Up 38 minutes       127.0.0.1:1514-&gt;514/tcp                                            harbor-log</div></pre></td></tr></table></figure></p>
<p><strong>问题1</strong>：在执行./install.sh时报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@registry01 harbor]# ./install.sh </div><div class="line">➜ Please set hostname and other necessary attributes in harbor.cfg first. DO NOT use localhost or 127.0.0.1 for hostname, because Harbor needs to be accessed by external clients.</div><div class="line">Please set --with-notary if needs enable Notary in Harbor, and set ui_url_protocol/ssl_cert/ssl_cert_key in harbor.cfg bacause notary must run under https. </div><div class="line">Please set --with-clair if needs enable Clair in Harbor</div><div class="line">[root@registry01 harbor]#vim harbor.cfg</div><div class="line">****解决方法****：</div><div class="line">修改harbor.cfg，将hostname=127.0.0.1改为hostname=registry01.demo.com</div></pre></td></tr></table></figure></p>
<p>安装完成之后，启动docker-compose<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@registry01 harbor]# docker-compose start</div><div class="line">Starting log         ... done</div><div class="line">Starting adminserver ... done</div><div class="line">Starting registry    ... done</div><div class="line">Starting ui          ... done</div><div class="line">Starting mysql       ... done</div><div class="line">Starting jobservice  ... done</div><div class="line">Starting proxy       ... done</div><div class="line">[root@registry01 harbor]# docker-compose ps</div><div class="line">       Name                     Command               State                                Ports                              </div><div class="line">------------------------------------------------------------------------------------------------------------------------------</div><div class="line">harbor-adminserver   /harbor/harbor_adminserver       Up                                                                      </div><div class="line">harbor-db            docker-entrypoint.sh mysqld      Up      3306/tcp                                                        </div><div class="line">harbor-jobservice    /harbor/harbor_jobservice        Up                                                                      </div><div class="line">harbor-log           /bin/sh -c crond &amp;&amp; rm -f  ...   Up      127.0.0.1:1514-&gt;514/tcp                                         </div><div class="line">harbor-ui            /harbor/harbor_ui                Up                                                                      </div><div class="line">nginx                nginx -g daemon off;             Up      0.0.0.0:443-&gt;443/tcp, 0.0.0.0:4443-&gt;4443/tcp, 0.0.0.0:80-&gt;80/tcp</div><div class="line">registry             /entrypoint.sh serve /etc/ ...   Up      5000/tcp</div></pre></td></tr></table></figure></p>
<p><strong>问题2</strong>：执行docker-compose start时报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[root@registry01 ~]# docker-compose start</div><div class="line">ERROR: </div><div class="line">        Can&apos;t find a suitable configuration file in this directory or any</div><div class="line">        parent. Are you in the right directory?</div><div class="line"></div><div class="line">        Supported filenames: docker-compose.yml, docker-compose.yaml</div><div class="line">****解决方法****</div><div class="line">启动docker-compose需要进入到harbor的目录下启动，</div><div class="line">[root@registry01 ~]# cd /data/harbor/</div><div class="line">[root@registry01 harbor]# docker-compose start</div><div class="line">Starting log         ... done</div><div class="line">Starting adminserver ... done</div><div class="line">Starting registry    ... done</div><div class="line">Starting ui          ... done</div><div class="line">Starting mysql       ... done</div><div class="line">Starting jobservice  ... done</div><div class="line">Starting proxy       ... done</div></pre></td></tr></table></figure></p>
<h1 id="登陆及镜像上传"><a href="#登陆及镜像上传" class="headerlink" title="登陆及镜像上传"></a>登陆及镜像上传</h1><h2 id="命令行登陆-（默认密码为Harbor12345，可在harbor-cfg中修改）"><a href="#命令行登陆-（默认密码为Harbor12345，可在harbor-cfg中修改）" class="headerlink" title="命令行登陆 （默认密码为Harbor12345，可在harbor.cfg中修改）"></a>命令行登陆 （默认密码为Harbor12345，可在harbor.cfg中修改）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@registry01 harbor]# docker login registry01.demo.com:80</div><div class="line">Username (admin): admin</div><div class="line">Password: </div><div class="line">Login Succeeded</div></pre></td></tr></table></figure>
<h2 id="网页登陆"><a href="#网页登陆" class="headerlink" title="网页登陆"></a>网页登陆</h2><p>登录并创建自己的镜像仓库(初始用户名/密码初始化为：admin/Harbor12345)。<br>这里我们使用HTTP方式，那么访问地址为：<br><a href="http://192.168.10.16/" target="_blank" rel="external">http://192.168.10.16/</a><br><img src="http://oys2ph34f.bkt.clouddn.com/harbor_login.jpg" alt="harbor——login"></p>
<h2 id="镜像上传"><a href="#镜像上传" class="headerlink" title="镜像上传"></a>镜像上传</h2><p>上传镜像需要先设置insecure-registry<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@registry01 ~]# vi /usr/lib/systemd/system/docker.service </div><div class="line"></div><div class="line">[Unit]</div><div class="line">Description=Docker Application Container Engine</div><div class="line">Documentation=http://docs.docker.com</div><div class="line">After=network.target</div><div class="line">Wants=docker-storage-setup.service</div><div class="line">Requires=rhel-push-plugin.socket registries.service</div><div class="line">Requires=docker-cleanup.timer</div><div class="line">...省略中间部分</div><div class="line">ExecStart=/usr/bin/dockerd-current \</div><div class="line">          --insecure-registry registry01.demo.com \ &lt;!--将insecure-registry设置为registry.demo.com--&gt;</div><div class="line">          --add-runtime docker-runc=/usr/libexec/docker/docker-runc-current \</div></pre></td></tr></table></figure></p>
<p>修改好之后，然后修改docker-compose.yml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">[root@registry01 harbor]# cp docker-compose.yml docker-compose.yml-`date +%F`</div><div class="line">[root@registry01 harbor]# vi docker-compose.yml</div><div class="line">version: &apos;2&apos;</div><div class="line">services:</div><div class="line">  log:</div><div class="line">    image: vmware/harbor-log:v1.2.2</div><div class="line">    container_name: harbor-log</div><div class="line">    restart: always</div><div class="line">    volumes:</div><div class="line">      - /var/log/harbor/:/var/log/docker/:z</div><div class="line">    ports:</div><div class="line">      - 127.0.0.1:1514:514</div><div class="line">...</div><div class="line">proxy:</div><div class="line">    image: vmware/nginx-photon:1.11.13</div><div class="line">    container_name: nginx</div><div class="line">    restart: always</div><div class="line">    volumes:</div><div class="line">      - ./common/config/nginx:/etc/nginx:z</div><div class="line">    networks:</div><div class="line">      - harbor</div><div class="line">    ports:</div><div class="line">      - 80:80</div><div class="line">      - 443:443</div><div class="line">      - 4443:4443</div><div class="line">      - 5000:5000  &lt;!--添加registry的端口--&gt;</div></pre></td></tr></table></figure></p>
<p>修改好之后，从命令行登陆<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@registry01 harbor]# docker login registry01.demo.com</div><div class="line">Username: admin</div><div class="line">Password: </div><div class="line">Login Succeeded</div><div class="line">[root@registry01 harbor]# docker push registry01.demo.com/library/photon:1.0</div><div class="line">The push refers to a repository [registry01.demo.com/library/photon]</div><div class="line">dd60b611baaa: Pushed </div><div class="line">1.0: digest: sha256:6d8fda39c2eb8fdc7b18c27f53fb6c01ac7721e7d55e7d6ae4cf6b1f3f0109fb size: 529</div><div class="line">[root@registry01 harbor]# docker images</div><div class="line">REPOSITORY                                                                 TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">...</div><div class="line">registry01.demo.com/library/photon                                         1.0                 e6e4e4a2ba1b        17 months ago       127.5 MB</div><div class="line">photon                                                                     1.0                 e6e4e4a2ba1b        17 months ago       127.5 MB</div></pre></td></tr></table></figure></p>
<p>上传成功<br>harbor会告诉使用者相关上传镜像的命令（以项目名为library为例）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker tag SOURCE_IMAGE[:TAG] registry01.demo.com/library/IMAGE[:TAG]</div><div class="line">docker push registry01.demo.com/library/IMAGE[:TAG]</div></pre></td></tr></table></figure></p>
<p>登陆到网页上查看<br><img src="http://oys2ph34f.bkt.clouddn.com/harbor_library.jpg" alt=""></p>
<hr>
<p><strong>PS</strong>：<br>1、如果需要用harbor管理registry上已有的镜像时，需要先将已有的镜像导入到harbor管理的镜像仓库中。<br>2、往registry中上传镜像之前需要先从命令行登陆，登陆之后才能push镜像</p>
]]></content>
      
        <categories>
            
            <category> Technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Technology </tag>
            
            <tag> Harbor </tag>
            
            <tag> Registry </tag>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于KVM虚拟化的管理工具--oVirt搭建（一）]]></title>
      <url>/2017/10/29/oVirt_install-1/</url>
      <content type="html"><![CDATA[<p>首先，需要准备两台内核在3.10以上的Linux服务器，这里以CentOS 7.4为例。两台服务器的IP地址和主机名分别为：<br>node1.test.com—-&gt;192.168.10.10—-oVirt管理端<br>node2.test.com—-&gt;192.168.10.11—-KVM虚拟化物理机<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@node1 ~]# hostname</div><div class="line">node1.test.com</div><div class="line">[root@node1 ~]# uname -a</div><div class="line">Linux node1.test.com 3.10.0-693.el7.x86_64 #1 SMP Tue Aug 22 21:09:27 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux</div><div class="line">[root@node1 ~]# ifconfig |head -n 3</div><div class="line">ens32: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</div><div class="line">        inet 192.168.10.10  netmask 255.255.255.0  broadcast 192.168.10.255</div><div class="line">        inet6 fe80::87e3:3b58:665:5b96  prefixlen 64  scopeid 0x20&lt;link&gt;</div></pre></td></tr></table></figure></p>
<p>服务器配置好后，需要将SELinux、firewalld关闭，并且配置好yum源，建议采用aliyun的yum源。</p>
<h2 id="Ovirt介绍"><a href="#Ovirt介绍" class="headerlink" title="Ovirt介绍"></a>Ovirt介绍</h2><p>目前oVirt的最新版本为oVirt 4.1,这里以安装4.1为例</p>
<hr>
<p>Install oVirt using package manager<br>oVirt 4.1 is intended for production use and is available for the following platforms:</p>
<p>Fedora 24<br>Red Hat Enterprise Linux 7.4 or later<br>CentOS Linux 7.4 or later<br>Scientific Linux 7.4 or later<br>Our recommended method of installing oVirt is to use the pre-built packages for Fedora or a supported Enterprise Linux 7 distribution, such as CentOS Linux or Red Hat Enterprise Linux. This makes installing oVirt very easy.</p>
<p>Important: Please note you can not skip a version. If you are updating from e.g. 3.6, you first need to update to 4.0 and then to 4.1. If you’re upgrading from a previous version, please update ovirt-release40 and verify you have the correct repositories enabled by running the following commands before upgrading with the usual procedure.<br>[root@test ~]yum install <a href="http://resources.ovirt.org/pub/yum-repo/ovirt-release41.rpm" target="_blank" rel="external">http://resources.ovirt.org/pub/yum-repo/ovirt-release41.rpm</a> </p>
<p>You should also read the Release Notes for oVirt 4.1.6.</p>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">[root@node1 ~]# yum install http://resources.ovirt.org/pub/yum-repo/ovirt-release41.rpm </div><div class="line">Loaded plugins: fastestmirror, langpacks</div><div class="line">ovirt-release41.rpm                                                                  |  15 kB  00:00:00     </div><div class="line">Examining /var/tmp/yum-root-DiNHCq/ovirt-release41.rpm: ovirt-release41-4.1.6-1.el7.centos.noarch</div><div class="line">Marking /var/tmp/yum-root-DiNHCq/ovirt-release41.rpm to be installed</div><div class="line">Resolving Dependencies</div><div class="line">--&gt; Running transaction check</div><div class="line">---&gt; Package ovirt-release41.noarch 0:4.1.6-1.el7.centos will be installed</div><div class="line">--&gt; Finished Dependency Resolution</div><div class="line">base/7/x86_64                                                                        | 3.6 kB  00:00:00     </div><div class="line">base/7/x86_64/group_gz                                                               | 156 kB  00:00:00     </div><div class="line">base/7/x86_64/primary_db                                                             | 5.7 MB  00:00:00     </div><div class="line">centosplus/7/x86_64                                                                  | 3.4 kB  00:00:00     </div><div class="line">centosplus/7/x86_64/primary_db                                                       | 1.8 MB  00:00:00     </div><div class="line">extras/7/x86_64                                                                      | 3.4 kB  00:00:00     </div><div class="line">extras/7/x86_64/primary_db                                                           | 129 kB  00:00:00     </div><div class="line">updates/7/x86_64                                                                     | 3.4 kB  00:00:00     </div><div class="line">updates/7/x86_64/primary_db                                                          | 3.6 MB  00:00:00     </div><div class="line"></div><div class="line">Dependencies Resolved</div><div class="line"></div><div class="line">============================================================================================================</div><div class="line"> Package                   Arch             Version                        Repository                  Size</div><div class="line">============================================================================================================</div><div class="line">Installing:</div><div class="line"> ovirt-release41           noarch           4.1.6-1.el7.centos             /ovirt-release41            10 k</div><div class="line"></div><div class="line">Transaction Summary</div><div class="line">============================================================================================================</div><div class="line">Install  1 Package</div><div class="line"></div><div class="line">Total size: 10 k</div><div class="line">Installed size: 10 k</div><div class="line">Is this ok [y/d/N]: y</div><div class="line">Downloading packages:</div><div class="line">Running transaction check</div><div class="line">Running transaction test</div><div class="line">Transaction test succeeded</div><div class="line">Running transaction</div><div class="line">  Installing : ovirt-release41-4.1.6-1.el7.centos.noarch                                                1/1 </div><div class="line">  Verifying  : ovirt-release41-4.1.6-1.el7.centos.noarch                                                1/1 </div><div class="line"></div><div class="line">Installed:</div><div class="line">  ovirt-release41.noarch 0:4.1.6-1.el7.centos                                                               </div><div class="line"></div><div class="line">Complete!</div><div class="line">[root@node1 ~]#</div></pre></td></tr></table></figure>
<p>ovirt 4.1安装好之后，需要在node1（oVirt管理端）上安装oVirt-engine，安装oVirt-engine有100多个包需要安装，耗费的时间就会稍微久一点。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@node1 ~]# yum install ovirt-engine</div></pre></td></tr></table></figure></p>
<p>等ovirt-engine相关的包安装完成之后则，运行engine-setup开始安装配置oVirt<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@node1 ~]# engine-setup</div></pre></td></tr></table></figure></p>
<p>具体的配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div></pre></td><td class="code"><pre><div class="line">[root@node1 ~]# engine-setup </div><div class="line">[ INFO  ] Stage: Initializing</div><div class="line">[ INFO  ] Stage: Environment setup</div><div class="line">          Configuration files: [&apos;/etc/ovirt-engine-setup.conf.d/10-packaging-jboss.conf&apos;, &apos;/etc/ovirt-engine-setup.conf.d/10-packaging.conf&apos;]</div><div class="line">          Log file: /var/log/ovirt-engine/setup/ovirt-engine-setup-20171030000600-sb0rsz.log</div><div class="line">          Version: otopi-1.6.2 (otopi-1.6.2-1.el7.centos)</div><div class="line">[ INFO  ] Stage: Environment packages setup</div><div class="line">[ INFO  ] Yum Downloading: ovirt-4.1/7 (0%)</div><div class="line">[ INFO  ] Stage: Programs detection</div><div class="line">[ INFO  ] Stage: Environment setup</div><div class="line">[ INFO  ] Stage: Environment customization</div><div class="line">         </div><div class="line">          --== PRODUCT OPTIONS ==--</div><div class="line">         </div><div class="line">          Configure Engine on this host (Yes, No) [Yes]: yes</div><div class="line">          Configure Image I/O Proxy on this host? (Yes, No) [Yes]: yes</div><div class="line">          Configure WebSocket Proxy on this host (Yes, No) [Yes]: yes</div><div class="line">          Please note: Data Warehouse is required for the engine. If you choose to not configure it on this host, you have to configure it on a remote host, and then configure the engine on this host so that it can access the database of the remote Data Warehouse host.</div><div class="line">          Configure Data Warehouse on this host (Yes, No) [Yes]: yes</div><div class="line">          Configure VM Console Proxy on this host (Yes, No) [Yes]: yes</div><div class="line">         </div><div class="line">          --== PACKAGES ==--</div><div class="line">         </div><div class="line">[ INFO  ] Checking for product updates...</div><div class="line">[ INFO  ] No product updates found</div><div class="line">         </div><div class="line">          --== NETWORK CONFIGURATION ==--</div><div class="line">         </div><div class="line">          Host fully qualified DNS name of this server [node1.test.com]: </div><div class="line">          Setup can automatically configure the firewall on this system.</div><div class="line">          Note: automatic configuration of the firewall may overwrite current settings.</div><div class="line">          Do you want Setup to configure the firewall? (Yes, No) [Yes]: yes</div><div class="line">          The following firewall managers were detected on this system: firewalld</div><div class="line">          Firewall manager to configure (firewalld): firewalld</div><div class="line">[ INFO  ] firewalld will be configured as firewall manager.</div><div class="line">         </div><div class="line">          --== DATABASE CONFIGURATION ==--</div><div class="line">         </div><div class="line">          Where is the DWH database located? (Local, Remote) [Local]: </div><div class="line">          Setup can configure the local postgresql server automatically for the DWH to run. This may conflict with existing applications.</div><div class="line">          Would you like Setup to automatically configure postgresql and create DWH database, or prefer to perform that manually? (Automatic, Manual) [Automatic]: </div><div class="line">          Where is the Engine database located? (Local, Remote) [Local]: </div><div class="line">          Setup can configure the local postgresql server automatically for the engine to run. This may conflict with existing applications.</div><div class="line">          Would you like Setup to automatically configure postgresql and create Engine database, or prefer to perform that manually? (Automatic, Manual) [Automatic]: </div><div class="line">         </div><div class="line">          --== OVIRT ENGINE CONFIGURATION ==--</div><div class="line">         </div><div class="line">          Engine admin password: </div><div class="line">          Confirm engine admin password: </div><div class="line">[WARNING] Password is weak: it is too short</div><div class="line">          Use weak password? (Yes, No) [No]: yes</div><div class="line">          Application mode (Virt, Gluster, Both) [Both]: </div><div class="line">         </div><div class="line">          --== STORAGE CONFIGURATION ==--</div><div class="line">         </div><div class="line">          Default SAN wipe after delete (Yes, No) [No]: </div><div class="line">         </div><div class="line">          --== PKI CONFIGURATION ==--</div><div class="line">         </div><div class="line">          Organization name for certificate [test.com]: </div><div class="line">         </div><div class="line">          --== APACHE CONFIGURATION ==--</div><div class="line">         </div><div class="line">          Setup can configure the default page of the web server to present the application home page. This may conflict with existing applications.</div><div class="line">          Do you wish to set the application as the default page of the web server? (Yes, No) [Yes]: </div><div class="line">          Setup can configure apache to use SSL using a certificate issued from the internal CA.</div><div class="line">          Do you wish Setup to configure that, or prefer to perform that manually? (Automatic, Manual) [Automatic]: </div><div class="line">         </div><div class="line">          --== SYSTEM CONFIGURATION ==--</div><div class="line">         </div><div class="line">          Configure an NFS share on this server to be used as an ISO Domain? (Yes, No) [No]: </div><div class="line">         </div><div class="line">          --== MISC CONFIGURATION ==--</div><div class="line">         </div><div class="line">          Please choose Data Warehouse sampling scale:</div><div class="line">          (1) Basic</div><div class="line">          (2) Full</div><div class="line">          (1, 2)[1]: </div><div class="line">         </div><div class="line">          --== END OF CONFIGURATION ==--</div><div class="line">         </div><div class="line">[ INFO  ] Stage: Setup validation</div><div class="line">[WARNING] Cannot validate host name settings, reason: resolved host does not match any of the local addresses</div><div class="line">[WARNING] Less than 16384MB of memory is available</div><div class="line">         </div><div class="line">          --== CONFIGURATION PREVIEW ==--</div><div class="line">         </div><div class="line">          Application mode                        : both</div><div class="line">          Default SAN wipe after delete           : False</div><div class="line">          Firewall manager                        : firewalld</div><div class="line">          Update Firewall                         : True</div><div class="line">          Host FQDN                               : node1.test.com</div><div class="line">          Configure local Engine database         : True</div><div class="line">          Set application as default page         : True</div><div class="line">          Configure Apache SSL                    : True</div><div class="line">          Engine database secured connection      : False</div><div class="line">          Engine database user name               : engine</div><div class="line">          Engine database name                    : engine</div><div class="line">          Engine database host                    : localhost</div><div class="line">          Engine database port                    : 5432</div><div class="line">          Engine database host name validation    : False</div><div class="line">          Engine installation                     : True</div><div class="line">          PKI organization                        : test.com</div><div class="line">          DWH installation                        : True</div><div class="line">          DWH database secured connection         : False</div><div class="line">          DWH database host                       : localhost</div><div class="line">          DWH database user name                  : ovirt_engine_history</div><div class="line">          DWH database name                       : ovirt_engine_history</div><div class="line">          DWH database port                       : 5432</div><div class="line">          DWH database host name validation       : False</div><div class="line">          Configure local DWH database            : True</div><div class="line">          Configure Image I/O Proxy               : True</div><div class="line">          Configure VMConsole Proxy               : True</div><div class="line">          Configure WebSocket Proxy               : True</div><div class="line">         </div><div class="line">          Please confirm installation settings (OK, Cancel) [OK]: </div><div class="line">[ INFO  ] Stage: Transaction setup</div><div class="line">[ INFO  ] Stopping engine service</div><div class="line">[ INFO  ] Stopping ovirt-fence-kdump-listener service</div><div class="line">[ INFO  ] Stopping dwh service</div><div class="line">[ INFO  ] Stopping Image I/O Proxy service</div><div class="line">[ INFO  ] Stopping vmconsole-proxy service</div><div class="line">[ INFO  ] Stopping websocket-proxy service</div><div class="line">[ INFO  ] Stage: Misc configuration</div><div class="line">[ INFO  ] Stage: Package installation</div><div class="line">[ INFO  ] Stage: Misc configuration</div><div class="line">[ INFO  ] Upgrading CA</div><div class="line">[ INFO  ] Initializing PostgreSQL</div><div class="line">[ INFO  ] Creating PostgreSQL &apos;engine&apos; database</div><div class="line">[ INFO  ] Configuring PostgreSQL</div><div class="line">[ INFO  ] Creating PostgreSQL &apos;ovirt_engine_history&apos; database</div><div class="line">[ INFO  ] Configuring PostgreSQL</div><div class="line">[ INFO  ] Creating CA</div><div class="line">[ INFO  ] Creating/refreshing Engine database schema</div><div class="line">[ INFO  ] Creating/refreshing DWH database schema</div><div class="line">[ INFO  ] Configuring Image I/O Proxy</div><div class="line">[ INFO  ] Setting up ovirt-vmconsole proxy helper PKI artifacts</div><div class="line">[ INFO  ] Setting up ovirt-vmconsole SSH PKI artifacts</div><div class="line">[ INFO  ] Configuring WebSocket Proxy</div><div class="line">[ INFO  ] Creating/refreshing Engine &apos;internal&apos; domain database schema</div><div class="line">[ INFO  ] Generating post install configuration file &apos;/etc/ovirt-engine-setup.conf.d/20-setup-ovirt-post.conf&apos;</div><div class="line">[ INFO  ] Stage: Transaction commit</div><div class="line">[ INFO  ] Stage: Closing up</div><div class="line">[ INFO  ] Starting engine service</div><div class="line">[ INFO  ] Starting dwh service</div><div class="line">[ INFO  ] Restarting ovirt-vmconsole proxy service</div><div class="line">         </div><div class="line">          --== SUMMARY ==--</div><div class="line">         </div><div class="line">[ INFO  ] Restarting httpd</div><div class="line">          Please use the user &apos;admin@internal&apos; and password specified in order to login</div><div class="line">          Web access is enabled at:</div><div class="line">              http://node1.test.com:80/ovirt-engine</div><div class="line">              https://node1.test.com:443/ovirt-engine</div><div class="line">          Internal CA C0:3E:00:3D:58:19:12:59:F2:B2:F8:DE:0A:1F:E7:BD:40:D4:21:38</div><div class="line">          SSH fingerprint: SHA256:CZZ7FrwMob5cwQJHyMVbQ5EoGujq1oV3cTr9pWRQ8Lw</div><div class="line">[WARNING] Less than 16384MB of memory is available</div><div class="line">         </div><div class="line">          --== END OF SUMMARY ==--</div><div class="line">         </div><div class="line">[ INFO  ] Stage: Clean up</div><div class="line">          Log file is located at /var/log/ovirt-engine/setup/ovirt-engine-setup-20171030000600-sb0rsz.log</div><div class="line">[ INFO  ] Generating answer file &apos;/var/lib/ovirt-engine/setup/answers/20171030001057-setup.conf&apos;</div><div class="line">[ INFO  ] Stage: Pre-termination</div><div class="line">[ INFO  ] Stage: Termination</div><div class="line">[ INFO  ] Execution of setup completed successfully</div><div class="line">[root@node1 ~]#</div></pre></td></tr></table></figure></p>
<hr>
<p>至此，oVirt已经安装完成，需要打开浏览器，输入下面的网址打开oVirt的控制台界面，然后输入账号和密码登陆即可。<br><a href="http://node1.test.com:80/ovirt-engine" target="_blank" rel="external">http://node1.test.com:80/ovirt-engine</a><br><a href="https://node1.test.com:443/ovirt-engine" target="_blank" rel="external">https://node1.test.com:443/ovirt-engine</a></p>
]]></content>
      
        <categories>
            
            <category> Technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Technology </tag>
            
            <tag> oVirt </tag>
            
            <tag> KVM </tag>
            
            <tag> Virtualmachine </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[性能收集工具--NMON的部署使用]]></title>
      <url>/2017/10/29/nmon_tools/</url>
      <content type="html"><![CDATA[<hr>
<p>Nmon 是一个分析AIX和Linux性能的免费工具（其主要是IBM为自己的AIX操作系统开发的，但是也可以应用在Linux操作系统上），而nmon_analyser是nmon的一个工具可以把nmon生成的报告转化成Excel报表的形式供我们查看。</p>
<hr>
<h4 id="下载nmon软件"><a href="#下载nmon软件" class="headerlink" title="下载nmon软件"></a>下载nmon软件</h4><hr>
<p>打开浏览器输入：<a href="http://nmon.sourceforge.net/pmwiki.php，" target="_blank" rel="external">http://nmon.sourceforge.net/pmwiki.php，</a> 然后后点击“Download Binaries”，根据自己操作系统的版本下载对应版本的nmon工具。（这里以操作系统版本为 Redhat Enterprise Linux 6.8 X86_64版本为例，选在下载的安装包为 nmon16e_mpginc.tar.gz ）</p>
<hr>
<h4 id="安装nmon工具"><a href="#安装nmon工具" class="headerlink" title="安装nmon工具"></a>安装nmon工具</h4><hr>
<p>将下载的安装包nmon16e_mpginc.tar.gz上传到linux服务器中，然后解压缩。</p>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">[root@host ~]# ls</div><div class="line">nmon16e_mpginc.tar.gz</div><div class="line">[root@host ~]# tar -xzvf nmon16e_mpginc.tar.gz </div><div class="line">nmon_arm_ubuntu15</div><div class="line">nmon_power_32_rhel6</div><div class="line">nmon_power_32_sles11</div><div class="line">nmon_power_64_kvm2</div><div class="line">nmon_power_64_rhel6</div><div class="line">nmon_power_64_rhel7</div><div class="line">nmon_power_64_sles11</div><div class="line">nmon_power_64le_fedora22</div><div class="line">nmon_power_64le_rhel6</div><div class="line">nmon_power_64le_rhel7</div><div class="line">nmon_power_64le_ubuntu14</div><div class="line">nmon_power_64le_ubuntu15</div><div class="line">nmon_power_64le_ubuntu16</div><div class="line">nmon_x86_64_centos6</div><div class="line">nmon_x86_64_centos7</div><div class="line">nmon_x86_64_opensuse11</div><div class="line">nmon_x86_64_opensuse12</div><div class="line">nmon_x86_64_rhel6</div><div class="line">nmon_x86_64_rhel7</div><div class="line">nmon_x86_64_sles11</div><div class="line">nmon_x86_64_sles12</div><div class="line">nmon_x86_64_ubuntu15</div><div class="line">[root@host ~]#</div><div class="line">*****</div></pre></td></tr></table></figure>
<p>选择对应的执行文件nmon_x86_64_rhel6，查看该文件的权限。给该文件赋予可执行的权限。</p>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@host ~]# ll nmon_x86_64_rhel6 </div><div class="line">-rwxr----- 1 root root 347506 Apr 14  2016 nmon_x86_64_rhel6</div><div class="line">[root@host ~]# chmod +x nmon_x86_64_rhel6</div><div class="line">[root@host ~]# ll nmon_x86_64_rhel6 </div><div class="line">-rwxr-x--x 1 root root 347506 Apr 14  2016 nmon_x86_64_rhel6</div></pre></td></tr></table></figure>
<hr>
<p>为了确保nmon执行后有个固定的目录存放收集到的nmon数据，需要新建一个目录用于保存。然后将rhel6的nmon执行文件移到该目录下。</p>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@host /]# mkdir -p /nmon/nmon_x86_64_linux6</div><div class="line">[root@host ~]# mv nmon_x86_64_rhel6 /nmon/nmon_x86_64_linux6/</div></pre></td></tr></table></figure>
<hr>
<p>然后定义一个脚本用于每天定时执行该脚本收集服务器的性能数据</p>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@host nmon_x86_64_linux6]# mkdir day</div><div class="line">[root@host nmon_x86_64_linux6]# cd day/</div><div class="line">[root@host day]# pwd</div><div class="line">/nmon/nmon_x86_64_linux6/day</div><div class="line">[root@host day]# cat nmon_day.sh </div><div class="line">#!/bin/bash</div><div class="line">mkdir /nmon/day/</div><div class="line">cd /nmon/day</div><div class="line">gzip *.nmon</div><div class="line">find /nmon/nmon_x86_64_linux6/day/* -mtime 7 -exec rm &#123; &#125; \;</div><div class="line">/nmon/nmon_x86_64_linux6/nmon_x86_64_rhel6 -fdt -s 300 -c 288</div></pre></td></tr></table></figure>
<hr>
<p>说明：nmon_day.sh是用来每天定时执行nmon的脚本，里面定义了nmon收集性能的颗粒度，范例是以每5分钟收集一次（5min*60sec）,然后总共收集288次（即收集一天的数据）；另外范例还定义了nmon数据保存的生命周期，当nmon保存的时间超过7天则删除该数据；同时在第二天启动该脚本时会自动将第一天的数据进行打包。<br>然后将该脚本添加到crontab钟，定义每天早上8点自动执行该脚本。</p>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@host nmon_x86_64_linux6]# crontab -l</div><div class="line">00 08 * * * /nmon/nmon_x86_64_linux6/day/nmon_day.sh</div></pre></td></tr></table></figure>
<h4 id="nmon分析工具–nmon-analyser"><a href="#nmon分析工具–nmon-analyser" class="headerlink" title="nmon分析工具–nmon_analyser"></a>nmon分析工具–nmon_analyser</h4><hr>
<p>首先需要从IBM的网站下载nmon Analyser，网址：<br><a href="https://www.ibm.com/developerworks/community/wikis/home?lang=en#!/wiki/Power+Systems/page/nmon_analyser" target="_blank" rel="external">https://www.ibm.com/developerworks/community/wikis/home?lang=en#!/wiki/Power+Systems/page/nmon_analyser</a>.<br>Nmon_Analyser下载下来后就是一个Excel，但是这个Excel就是我们需要的工具了。双击打开这个Excel文件，点击“Analyze nmon data”，然后选择我们刚才生成的nmon文件，大概十几秒左右（数据量不同，生成的时间也不一样）就会生成我们需要的报表了。此时我们就可以更加直观的观看CPU，内存等数据了。</p>
<hr>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><hr>
<p>nmon analyser需要借助Excel的宏，当弹出“启用宏”还是“禁用宏”时，需要选择“启用宏”，然后点击“Analyze nmon data”，选择你收集到的*.nmon文件进行分析，最后得到的.xlsx就是分析后的结果，里面将会呈现该服务器在CPU、内存、IO、文件使用等相关性能信息。</p>
<hr>
]]></content>
      
        <categories>
            
            <category> Tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tools </tag>
            
            <tag> nmon </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/10/19/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[标签]]></title>
      <url>/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[分类]]></title>
      <url>/categories/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
